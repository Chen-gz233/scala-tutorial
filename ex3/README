https://blog.csdn.net/qq_34291505/article/details/86750352
//Scala的函数定义
        //以“def”开头，
        //然后是一个自定义的函数名(推荐驼峰命名法)，
        //接着是用圆括号“( )”包起来的参数列表。
        //在参数列表里，多个参数用逗号隔开，并且每个参数名后面要紧跟一个冒号以及显式声明的参数类型，
                    //因为编译器在编译期间无法推断出入参类型。
        //写完参数列表后，应该紧跟一个冒号，再添加函数返回结果的类型。
        //最后，再写一个等号“=”，等号后面是用花括号“{ }”包起来的函数体。


        用“def”开始函数定义
       | 函数名
       |   |  参数及参数类型
       |   |        |   函数返回结果的类型
       |   |        |          |  等号
       |   |        |          |   |
      def max(x: Int, y: Int): Int = {
        if(x > y)
          x
        else  |
          y   | 
      }       |
              |
       花括号里定义函数体


在Scala的代码里，语句末尾的分号是可选的，因为编译器会自动推断分号。
如果一行只有一条完整的语句，那么分号可写可不写；
如果一行有多条语句，则必须用分号隔开。

###分号推断
有三种情况句末不会推断出分号：
①句末是以非法结尾字符结尾，例如以句点符号“.”或中缀操作符结尾。
②下一行的句首是以非法起始字符开始，例如以句点符号“.”开头。
③跨行出现的圆括号对“( )”或者方括号对“[ ]”，因为它们里面不能进行分号的自动推断，要么只包含一条完整语句，要么包含用分号显式隔开的多条语句。


###函数的返回结果
在Scala里，“return”关键字也是可选的。默认情况下，编译器会自动为函数体里的最后一个表达式加上“return”，将其作为返回结果。
建议不要显式声明“return”，这会引发warning，而且使得代码风格看上去像指令式风格。

返回结果的类型也是可以根据参数类型和返回的表达式来自动推断的，也就是说，上例中的“: Int”通常是可以省略的。
        def add(x:Int , y:Int)={x+y}
        add: (x: Int, y: Int)Int

        scala> add(3,4)
        res0: Int = 7



返回结果有一个特殊的类型——Unit，表示没有值返回。也就是说，这是一个有副作用的函数，并不能提供任何可引用的返回结果。
Unit类型同样可以被推断出来，但如果显式声明为Unit类型的函数，则即使函数体最后有一个可以返回具体值的表达式，也不会把表达式的结果返回。
        scala> def addu(a:Int, b:Int):Unit={a+b}
        addu: (a: Int, b: Int)Unit

        scala> addu(3,4)



###嵌套函数
函数体内部还可以定义函数，这种函数的作用域是局部的，只能被定义它的外层函数调用，外部无法访问。
局部函数可以直接使用外层函数的参数，也可以直接使用外层函数的内部变量。

scala> def addSub(x: Int, y: Int) = {
         |     def sub(z: Int) = z - 10
         |     if(x > y) sub(x - y) else sub(y - x)
         | }
addSub: (x: Int, y: Int)Int

scala> addSub(100, 20)
res0: Int = 70

### 柯里化
对大多数编程语言来说，函数只能有一个参数列表，但是列表里可以有若干个用逗号间隔的参数。
Scala有一个独特的语法——柯里化，也就是一个函数可以有任意个参数列表。柯里化往往与另一个语法结合使用：当参数列表里只有一个参数时，在调用该函数时允许单个参数不用圆括号包起来，改用花括号也是可行的。
        scala> def add(x: Int, y: Int, z: Int) = x + y + z
        add: (x: Int, y: Int, z: Int)Int

        scala> add(1, 2, 3)
        res0: Int = 6

        scala> def addCurry(x: Int)(y: Int)(z: Int) = x + y + z
        addCurry: (x: Int)(y: Int)(z: Int)Int

        scala> addCurry(1)(2) {3}
        res1: Int = 6

### 传名参数
如果某个函数的入参类型是一个无参函数，那么通常的类型表示法是“() => 函数的返回类型”
调用这个函数时，给出的参数就必须写成形如“() => 函数体”这样的函数字面量。
为了让代码看起来更舒服，也为了让自定义控制结构更像内建结构，Scala又提供了一个特殊语法——传名参数。
也就是类型是一个无参函数的函数入参，传名参数的类型表示法是“=> 函数的返回类型”，
即相对常规表示法去掉了前面的空括号。
在调用该函数时，传递进去的函数字面量则可以只写“函数体”，去掉了“() =>”。

